import React, { Component } from "react";
import ReactDOM from "react-dom";
import _ from "lodash";

import { createStore, applyMiddleware, combineReducers, compose } from "redux";
import { Provider, connect } from "react-redux";
// import { Form, Control, Errors, combineForms, actions } from 'react-redux-form'
import thunk from "redux-thunk";
import createLogger from "redux-logger";
// import RxForm from 'rxform';

// console.log(RxForm);

const logger = createLogger();

import {
  Field,
  Fieldset,
  Errors,
  Control,
  Form,
  LocalForm,
  combineForms,
  actions,
  formReducer,
  modeled,
  controls
} from "react-redux-form";

// ========================================
// ========================================
import Select from 'react-select';

const initialState = {
  name: '',
  activities: []
};

const store = createStore(
  combineForms({
    hotel: initialState
  }),
  applyMiddleware(thunk, logger)
);

function isRequired(val) {
  console.log(val);
  return val && val.length > 0;
}

class HotelForm extends Component {
  componentDidMount() {
    // load values, e.g. from DB
    console.log('-----');

        this.props.dispatch(
          actions.change(
            'hotel',
            {
              name: 'Great Thing',
              activities: [50]
            },
            { silent: false }
          )
        )
  }
  render() {
    const { dispatch } = this.props;

    return (
      <Form model="hotel" onSubmit={v => console.log(v)}>
        <h1>Thing</h1>
        <div className="field">
          <label>Name:</label>
          <Control.text
            className="form-control"
            model=".name"
            validators={{
              isRequired
            }}
          />
          <Errors
            model=".name"
            messages={{
              isRequired: 'Needs to be filled'
            }}
          />
        </div>

        <div className="field">
          <label>Activities:</label>
          <Control.custom
            model=".activities"
            mapProps={{
              onChange: props => props.onChange,
              onBlur: props => props.onBlur,
              value: props => props.modelValue
            }}
            validateOn={['change']}
            onChange={choice => {
              dispatch(
                actions.change(
                  'hotel.activities',
                  choice.map(item => item.value)
                )
              );
            }}
            component={Select}
            multi
            placeholder="Choose"
            name="activities"
            validators={{
              isRequired
            }}
            options={[
              { label: 'Hiking', value: 40 },
              { label: 'Gardening', value: 50 }
            ]}
          />
          <Errors
            model=".activities"
            wrapper="ul"
            component="li"
            messages={{
              isRequired:
                'Error message that should not appear since the field has a value; supposedly, this should go away when you click Save and the whole form validates'
            }}
          />
        </div>
        <div>
          <button type="submit">Save</button>
        </div>
      </Form>
    );
  }
}

const ConnectedForm = connect()(HotelForm);

class App extends React.Component {
  render() {
    return (
      <Provider store={store}>
        <ConnectedForm />
      </Provider>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('app'));
